/* Aula 03 - Invocando Functions
01/06/2021*/
// Chamamos PARAM√äTROS as vari√°veis que escrevemos quando definimos a fun√ß√£o.
// Chamamos ARGUMENTOS os valores que enviamos quando invocamos a fun√ß√£o.

//Invocando uma fun√ß√£o
function fazerSorvete () {
    return 'üç¶';
}

// A maneira de invocar (tamb√©m conhecida como chamar ou executar) uma fun√ß√£o √© escrevendo seu nome, seguido da abertura e fechamento de par√™nteses.
fazerSorvete (); // Retornar√° 'üç¶'

resultado = fazerSorvete (); // Para imprimir no Output. Fazer uma vari√°vel, depois aplicar no console
console.log(resultado); // Retornar√° 'üç¶'

// Se a fun√ß√£o tiver par√¢metros, podemos pass√°-los entre par√™nteses ao invoc√°-la. √â importante respeitar a ordem, pois o JavaScript atribuir√° os valores na ordem em que chegarem.
function bemVindo(nome, sobrenome) {
    return 'Ol√°, ' + nome + ' ' + sobrenome;
}

bemVindo('Jo√£o', 'da Silva'); // retornar√° 'Ol√°, Jo√£o da Silva'

resultado = bemVindo ('Jo√£o', 'da Silva');
console.log(resultado)

// Tamb√©m √© importante ter em mente que, quando temos par√¢metros em nossa fun√ß√£o, o JavaScript espera que os indiquemos ao execut√°-la. 
// Neste caso, n√£o tendo recebido o argumento necess√°rio, o JavaScript atribui o tipo de dado undefined aos par√¢metros nome e sobrenome.
function bemVindo1(nome, sobrenome) {
    return 'Ol√°, ' + nome + ' ' + sobrenome;
}
    
bemVindo1 (); // retornar√° 'Ol√° undefined undefined'

resultado = bemVindo1 ();
console.log(resultado)

// Para casos como o anterior, podemos definir valores por padr√£o. Se adicionarmos o sinal de igual = depois de um par√¢metro, podemos especificar seu valor, caso nenhum chegue.
function bemVindo2 (nome = 'visitante', sobrenome = 'an√¥nimo') {
return 'Ol√°, ' + nome + ' ' + sobrenome;
}

bemVindo2 (); // retornar√° 'Ol√°, visitante an√¥nimo'

resultado = bemVindo2 ();
console.log(resultado)